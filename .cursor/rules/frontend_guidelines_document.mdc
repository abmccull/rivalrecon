---
description: Apply these rules when making changes to the project
globs: 
alwaysApply: false
---

Update this rule if user requested changes to the project requirement, etc.
# Frontend Guidelines Document

This document outlines the standards and guidelines for frontend development in the RivalRecon application using Next.js, Shadcn UI, and Tailwind CSS.

## Component Structure

### Server vs. Client Components

- Use **Server Components** by default for:
  - Static UI elements
  - Data fetching
  - Components that don't need client-side interactivity

- Use **Client Components** (with `"use client"` directive) only when:
  - Using hooks (useState, useEffect, etc.)
  - Adding event listeners
  - Using browser-only APIs
  - Using client-side libraries that rely on the window object

### Component Organization

Components are organized into the following categories:

1. **UI Components** (`components/ui/`)
   - Reusable, unstyled components from Shadcn UI
   - Should be used as building blocks for other components
   - Generally don't contain business logic

2. **Layout Components** (`components/layout/`)
   - Components that define the application's structure (Sidebar, Header)
   - May contain navigation logic but generally minimal business logic

3. **Feature Components** (`components/[feature]/`)
   - Domain-specific components (e.g., `components/competitor/`)
   - May contain business logic related to their domain
   - Should be composed of UI components

4. **Page Components** (`app/*/page.tsx`)
   - Root components for each route
   - Handle data fetching for the page
   - Compose other components to build the page

### Component Naming Conventions

- Use **PascalCase** for component names: `CompetitorCard.tsx`
- Use **kebab-case** for file names of Shadcn UI components: `card.tsx`
- Group related components in feature-specific folders
- If a component has subcomponents, place them in the same file or create a folder:
  ```
  components/competitor/
  ├── competitor-card.tsx
  ├── competitor-list/
  │   ├── index.tsx
  │   ├── competitor-list-item.tsx
  │   └── competitor-list-header.tsx
  ```

## Styling Guidelines

### Tailwind CSS Usage

- Use Tailwind CSS utility classes directly in JSX
- Follow mobile-first responsive design:
  ```jsx
  <div className="p-4 md:p-6 lg:p-8">...</div>
  ```
- Create consistent spacing using Tailwind's spacing scale
- Extend the Tailwind theme in `tailwind.config.js` rather than creating custom CSS

### Custom Styling

When Tailwind utilities aren't sufficient:

1. Use `@apply` directives in a module CSS file:
   ```css
   .customButton {
     @apply rounded-md bg-primary text-white px-4 py-2 hover:bg-primary/90;
   }
   ```

2. For one-off styling, use inline styles with the `style` prop (sparingly)

3. For complex animations, use Framer Motion or CSS animations

### Color System

Use Tailwind's color system with our custom palette:

- `primary` - Main brand color
- `secondary` - Secondary brand color
- `background` - Page backgrounds
- `foreground` - Text on background
- `muted` - Subdued backgrounds
- `accent` - Highlighting elements
- `destructive` - Error states

Access using CSS variables or Tailwind classes:
```jsx
<div className="bg-primary text-primary-foreground">...</div>
```

## State Management

### Local State

- Use `useState` and `useReducer` for component-local state
- Prefer controlled components for form inputs
- Use React's Context API for small, localized state sharing

### Global State

- Use Zustand for global application state
- Create stores in `lib/store/[feature]-store.ts`
- Follow this pattern:

```typescript
// lib/store/competitors-store.ts
import { create } from 'zustand'
import { createClient } from '@/lib/supabase'

interface CompetitorsState {
  competitors: Competitor[];
  loading: boolean;
  error: string | null;
  fetchCompetitors: () => Promise<void>;
  // Other actions...
}

export const useCompetitorsStore = create<CompetitorsState>((set, get) => ({
  competitors: [],
  loading: false,
  error: null,
  
  fetchCompetitors: async () => {
    set({ loading: true, error: null });
    try {
      // Implementation...
      set({ competitors: data, loading: false });
    } catch (error: any) {
      set({ error: error.message, loading: false });
    }
  },
  // Other methods...
}));
```

## Forms and Validation

- Use React Hook Form for form state management
- Use Zod for form validation
- Use Shadcn UI form components for consistency

Example pattern:

```typescript
import { z } from "zod";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";

const formSchema = z.object({
  name: z.string().min(3, { message: "Name must be at least 3 characters" }),
  // other fields...
});

export function CompetitorForm() {
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: "",
    },
  });

  function onSubmit(values: z.infer<typeof formSchema>) {
    // Handle submission
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Name</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button type="submit">Submit</Button>
      </form>
    </Form>
  );
}
```

## Data Fetching

### In Server Components

- Fetch data directly in Server Components:
  ```typescript
  export default async function CompetitorPage() {
    const supabase = createServerClient();
    const { data } = await supabase.from('competitors').select('*');
    return <CompetitorList competitors={data} />;
  }
  ```

### In Client Components

- Create custom hooks for data fetching:
  ```typescript
  // Using React Query
  export function useCompetitors() {
    return useQuery({
      queryKey: ['competitors'],
      queryFn: async () => {
        const supabase = createClient();
        const { data, error } = await supabase.from('competitors').select('*');
        if (error) throw error;
        return data;
      }
    });
  }

  // Simple Custom Hook
  export function useCompetitors() {
    const [competitors, setCompetitors] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
      async function fetchCompetitors() {
        try {
          // Implementation...
        } catch (error) {
          // Error handling...
        }
      }
      fetchCompetitors();
    }, []);

    return { competitors, loading, error };
  }
  ```

## Performance Considerations

- Use proper image optimization with `next/image`
- Implement appropriate caching strategies for data fetching
- Lazy load components and routes when appropriate
- Use the `useCallback` and `useMemo` hooks for expensive computations
- Avoid unnecessary renders with proper state management
- Use Server Components whenever possible to reduce JS bundle size

## Accessibility Standards

- All interactive elements must be keyboard accessible
- Use semantic HTML elements
- Ensure proper contrast ratios for text
- Provide `aria-*` attributes where necessary
- Add proper focus management for modals, dialogs, etc.
- Test with screen readers

## Testing

- Write unit tests for utility functions
- Write component tests using React Testing Library
- Focus on testing behavior, not implementation details
- For complex components, create test IDs:
  ```jsx
  <button data-testid="delete-competitor-btn">Delete</button>
  ```

## Recommended Patterns

### Compound Components

```jsx
function Tabs({ children }) {
  const [activeTab, setActiveTab] = useState(0);
  return (
    <TabsContext.Provider value={{ activeTab, setActiveTab }}>
      {children}
    </TabsContext.Provider>
  );
}

Tabs.List = function TabsList({ children }) {
  return <div className="flex space-x-2">{children}</div>;
};

Tabs.Tab = function Tab({ children, index }) {
  const { activeTab, setActiveTab } = useTabsContext();
  return (
    <button 
      className={activeTab === index ? "active" : ""} 
      onClick={() => setActiveTab(index)}
    >
      {children}
    </button>
  );
};

Tabs.Content = function TabsContent({ children, index }) {
  const { activeTab } = useTabsContext();
  if (activeTab !== index) return null;
  return children;
};
```

### Conditional Rendering

```jsx
{isLoading ? (
  <LoadingSpinner />
) : error ? (
  <ErrorMessage message={error} />
) : data.length > 0 ? (
  <DataList items={data} />
) : (
  <EmptyState />
)}
```

## Code Organization

- Import order:
  1. React/Next.js imports
  2. External library imports
  3. Internal components/hooks/utils
  4. Types
  5. Styles

- Declare types and interfaces at the top of the file or in a separate types file
- Keep components focused on a single responsibility
- Extract complex logic into custom hooks

This guide serves as a reference for maintaining consistent, high-quality frontend code throughout the RivalRecon application. Follow these guidelines to ensure a coherent development experience and a polished end product.