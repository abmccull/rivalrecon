---
description: Apply these rules when making changes to the project
globs: 
alwaysApply: true
---
### RivalRecon Supabase Authentication Rules (Next.js Integration)

Purpose

This document provides strict guidelines for implementing authentication functionalities in RivalRecon using Supabase's built-in authentication exclusively, integrated within a **Next.js (App Router)** frontend. It focuses on ensuring secure user management, session handling, and enforcing Row Level Security (RLS) in all database transactions.

### 1. Authentication Architecture

Supabase Authentication

*   **Method**: Use Supabase's native authentication system for sign-up, sign-in, and session management processes, primarily handled via the Next.js frontend.

*   **User Data Storage**: Utilize the `auth.users` table in Supabase, using UUID as the primary identifier for user records.

*   **Authentication Mechanisms**:

    *   Support email/password authentication system.
    *   Optionally enable OAuth providers such as Google if specified in future requirements.

### 2. Database Architecture

Supabase Database Schema

*   **Tables**:

    *   **Submissions**: Contains fields like `id`, `url`, `user_id`, `status`, and `created_at`.
    *   **Reviews**: Includes fields such as `id`, `submission_id`, `product_name`, `brand_name`, `category`, `overall_rating`, `review_text`, `review_date`, and `created_at`.
    *   **Analyses**: Comprises fields like `id`, `submission_id`, `ratings_over_time`, `trending`, `top_positives`, `top_negatives`, `word_map`, `competitive_insights`, `opportunities`, and `created_at`.

Row Level Security (RLS)

*   **Implementation**: Enable RLS on all database tables to control access based on the authenticated user's ID.
*   **Access Control**: Restrict access to rows by matching `user_id` with `auth.uid()` from the session context (available in backend API calls and Supabase client sessions).

### 3. Production Environment Best Practices

*   **Logging and Debugging**:
    *   Remove all debug and console logging statements from production code, especially those that might expose sensitive user data.
    *   Retain only critical error logs that aid in troubleshooting server-side issues without exposing user information.
    *   Use structured logging in production with proper error handling that doesn't reveal implementation details.

*   **Error Handling**:
    *   Implement comprehensive error boundaries in React components to gracefully handle failures.
    *   Provide user-friendly error messages instead of exposing technical details.
    *   Always validate user input server-side regardless of client-side validation.

*   **Security Considerations**:
    *   Never store authentication tokens or sensitive user data in localStorage or sessionStorage.
    *   Implement proper CSRF protection using Supabase's built-in token rotation mechanisms.
    *   Set appropriate cookie security attributes (Secure, HttpOnly, SameSite) in production environments.
    *   Rate-limit authentication endpoints to prevent brute force attacks.

*   **Mock Data**:
    *   Never use mock data in production environments.
    *   Implement proper error states and loading indicators for when real data is unavailable.
    *   Create proper empty states for components instead of falling back to fake data.

### 4. Application Components

Frontend (Next.js)

*   **Library**: Use `@supabase/supabase-js` with the official `@supabase/ssr` package (which replaces the deprecated `@supabase/auth-helpers-nextjs`).

*   **Cookie Handling**:
    *   Always `await` the `cookies()` function in server components and API routes.
    *   Use the `CookieOptions` type from `@supabase/ssr` for proper type safety.
    *   Never expose cookie values or session tokens in client-side code or console logs.

*   **Functionality**:

    *   Implement user flows for sign-up, sign-in, sign-out using Client Components.
    *   Manage client-side auth state (e.g., via Context or Zustand).
    *   Utilize Next.js Middleware for route protection based on session status.
    *   Pass authenticated Supabase client instance or session token to backend API requests when necessary.

Backend (Node.js/Express)

*   **Library**: Optionally use `@supabase/supabase-js` (server-side) for admin tasks if needed, but primarily relies on **JWT validation**. Can use libraries like `jsonwebtoken` and `jwks-rsa` or Supabase-provided helpers to verify tokens.
*   **Role**: Validate Supabase JWTs received in `Authorization` headers from the Next.js frontend for protected API endpoints. Does not manage sessions directly but relies on the validated token for user identification (`auth.uid()`).

### 4. Setup Guidelines

Supabase Authentication Configuration

*   **Settings**:

    *   Enable email authentication in the Supabase Dashboard under Authentication Settings.
    *   Configure Site URL and Redirect URLs appropriately for Next.js deployment (e.g., Vercel URLs).
    *   Consider disabling email confirmations in development environments for easier testing.

*   **Third-Party Providers**: Avoid the inclusion of third-party authentication providers unless requested.

Database Schema and RLS Definition

*   **Schema Requirements**:

    *   Ensure `user_id` is UUID NOT NULL DEFAULT `auth.uid()` or appropriately references `auth.users(id)` in all relevant tables.
    *   Use UUIDs for primary keys, generated via `uuid_generate_v4()`.

*   **RLS Policies**:

    *   **For submissions**:
        *   **SELECT Policy**: `USING (auth.uid() = user_id)`
        *   **INSERT Policy**: `WITH CHECK (auth.uid() = user_id)`
        *   (Define similar policies for `reviews` and `analyses` based on `submission_id` linkage and user ownership of the submission).

    *   **Enabling RLS**:
        *   Confirm RLS is enabled by executing: `ALTER TABLE <table> ENABLE ROW LEVEL SECURITY`.

Environment Variables

*   **Configuration**:
    *   **Frontend (`.env.local`):** `NEXT_PUBLIC_SUPABASE_URL`, `NEXT_PUBLIC_SUPABASE_ANON_KEY`.
    *   **Backend (`.env` or Railway secrets):** `SUPABASE_URL`, `SUPABASE_SERVICE_ROLE_KEY` (if needed for admin tasks), `SUPABASE_JWT_SECRET` (or configure JWKS fetching for validation).

Supabase Client Integration (Next.js)

*   **Initialization**: Set up Supabase client instances for browser (client components) and server-side (server components, middleware, API routes) contexts using the `@supabase/ssr` package. Use `createBrowserClient` for client components and `createServerClient` for server components, middleware, and API routes.
*   **Session Management**: Leverage Supabase's cookie-based session handling, integrated with Next.js middleware/server components for seamless auth state persistence and validation.

### 5. Strict Rules for Implementation

Supabase Exclusive Use

*   **Integration**: Do not integrate third-party authentication providers, such as Clerk.
*   **Functionality**: Implement sign-up, sign-in, and sign-out using Supabase's auth functions via the Next.js frontend.

Enforcing RLS

*   **Policy**: Always enable RLS on new tables containing user-specific data.
*   **Schema Control**: Ensure `user_id` association via `auth.uid()` or foreign key reference to `auth.users`.
*   **Data Access**: Rely on RLS for data filtering in direct Supabase queries (frontend or backend). Backend API should validate user context via JWT before performing actions.

Handling Authentication (Next.js)

*   **Session Management**:
    *   Use middleware to check session status for protected routes.
    *   Utilize Supabase `onAuthStateChange` on the client-side (e.g., in an Auth Provider) to update UI state.
    *   Provide UI for sign-up, sign-in, sign-out in dedicated auth pages/components.

Secure Database Operations & API Calls

*   **Frontend Queries**: Use the authenticated Supabase client which respects RLS.
*   **Backend API Calls**: Frontend must include the Supabase JWT in the `Authorization: Bearer <token>` header.
*   **Backend Validation**: Backend API must validate the JWT before processing requests.
*   **Integrity**: Ensure `user_id` is populated via table defaults (`default auth.uid()`) or derived from the validated JWT on the backend, not passed manually in API payloads.

### 6. Troubleshooting Guidelines

Authentication Errors

*   **401 Unauthorized (API)**:
    *   Verify JWT is present and valid in the `Authorization` header.
    *   Check backend JWT validation logic (secret or JWKS URL correctness).
*   **Client-side Auth Issues:**
    *   Inspect Supabase client initialization (URL/Key).
    *   Check browser cookies for Supabase session cookie.

RLS Errors

*   **Investigation**:
    *   Confirm RLS policies use `auth.uid()` correctly.
    *   Verify JWT validation provides the correct user context (`auth.uid()`) on the backend API.
    *   Ensure the user performing the action actually owns the data according to the `user_id` column.

Session Challenges

*   **Management**:
    *   Verify middleware correctly reads/validates session cookies.
    *   Ensure `onAuthStateChange` listener is correctly updating client-side state.
    *   Test sign-out properly clears cookies and client state.

### 7. Client/Server Implementation Structure

Project Structure

*   **Client-Side Integration**:
    * Create a utility file at `src/lib/supabase/client.ts` that implements the client-side Supabase instance using `createBrowserClient` from `@supabase/ssr`.
    * Example implementation:
    ```typescript
    "use client";
    import { createBrowserClient } from '@supabase/ssr';
    
    export const createClient = () => {
      return createBrowserClient(
        process.env.NEXT_PUBLIC_SUPABASE_URL!,
        process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
      );
    };
    ```

*   **Server-Side Integration**:
    * Create a utility file at `src/lib/supabase/server.ts` that implements the server-side Supabase instance using `createServerClient` from `@supabase/ssr`.
    * Example implementation:
    ```typescript
    import { cookies } from 'next/headers';
    import { createServerClient } from '@supabase/ssr';
    
    export const createClient = () => {
      const cookieStore = cookies();
      
      return createServerClient(
        process.env.NEXT_PUBLIC_SUPABASE_URL!,
        process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
        {
          cookies: {
            get(name: string) {
              return cookieStore.get(name)?.value;
            },
            set(name: string, value: string, options: any) {
              cookieStore.set({ name, value, ...options });
            },
            remove(name: string, options: any) {
              cookieStore.set({ name, value: '', ...options });
            },
          },
        }
      );
    };
    ```

*   **Middleware Implementation**:
    * Implement middleware at `src/middleware.ts` using `createServerClient` from `@supabase/ssr` for route protection.
    * Example implementation:
    ```typescript
    import { createServerClient } from '@supabase/ssr';
    import { NextResponse, type NextRequest } from 'next/server';
    
    export async function middleware(request: NextRequest) {
      const response = NextResponse.next();
      const supabase = createServerClient(
        process.env.NEXT_PUBLIC_SUPABASE_URL!,
        process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
        {
          cookies: {
            get(name: string) {
              return request.cookies.get(name)?.value;
            },
            set(name: string, value: string, options: any) {
              request.cookies.set({ name, value, ...options });
              response.cookies.set({ name, value, ...options });
            },
            remove(name: string, options: any) {
              request.cookies.delete(name);
              response.cookies.delete(name);
            },
          },
        }
      );
      
      await supabase.auth.getSession();
      return response;
    };
    ```

### 8. Validation Checklist

Authentication Features

*   **Functionality**: Users must be able to sign up, sign in, and sign out seamlessly via the Next.js frontend.
*   **Session Robustness**: Validate that sessions persist across page navigations, browser refreshes, and server/client component interactions.
*   **Route Protection**: Ensure middleware correctly protects routes and redirects unauthenticated users.
*   **API Protection**: Ensure backend API endpoints correctly validate JWTs and return 401/403 errors for invalid/unauthorized requests.

Database Security

*   **RLS**: Confirm that data access via direct Supabase queries and backend API calls is appropriately restricted based on the authenticated user.
*   **Defaults**: Ensure `user_id` defaults to `auth.uid()` or is correctly set based on validated context.

Error Handling

*   **Assessment**: Authentication and query errors should be properly caught and displayed to users (e.g., using Toasts).

Testing Consistency

*   **Isolation**: Conduct multi-user tests to confirm data segregation and access restrictions.

### Conclusion

These comprehensive guidelines ensure that RivalRecon maintains a robust, secure, and exclusive Supabase-based authentication system integrated within the Next.js frontend. By adhering strictly to Supabase's native authentication, RLS capabilities, and proper Next.js integration patterns, the application enhances security, reduces complexity, and ensures compliance with project specifications.
