---
description: Apply these rules when making changes to the project
globs: 
alwaysApply: true
---

Update this rule if user requested changes to the project requirement, etc.
# Implementation Plan: Frontend Migration to Next.js

This document outlines the plan for migrating the RivalRecon frontend from Create React App (CRA) with Chakra UI to Next.js (App Router) with Shadcn UI and Tailwind CSS. The backend remains unchanged.

## Phase 0: Preparation & Setup

1.  **Backup:** Ensure the current `frontend` codebase and all `.mdc` files are backed up or committed to version control.
2.  **New Project Initialization:**
    *   Create a new directory `frontend-next` alongside existing `frontend` and `backend`.
    *   Inside `frontend-next`, initialize a new Next.js project:
        ```bash
        npx create-next-app@latest frontend-next --typescript --tailwind --eslint --app --src-dir --use-npm --import-alias "@/*"
        ```
    *   Navigate into `frontend-next`.
3.  **Install Core Dependencies:**
    *   Supabase: `npm install @supabase/supabase-js`
    *   Shadcn UI: `npx shadcn-ui@latest init` (Choose defaults)
    *   Plotly: `npm install react-plotly.js plotly.js`
    *   Date Util: `npm install dayjs`
    *   Icons: `npm install lucide-react`
    *   State (Optional): `npm install zustand`
    *   Forms (Optional): `npm install react-hook-form @hookform/resolvers zod`
4.  **Install Initial Shadcn Components:** Add commonly needed components (Button, Card, Input, Table, Sheet, DropdownMenu, Avatar, etc.) via `npx shadcn-ui@latest add ...`.
5.  **Environment Variables:** Create `frontend-next/.env.local`. Copy Supabase vars from old `.env`, prefix with `NEXT_PUBLIC_`. Add `NEXT_PUBLIC_API_URL` pointing to the backend.
6.  **Basic Config:** Ensure Tailwind directives are in `src/app/globals.css`. Review `tailwind.config.ts`.

## Phase 1: Layout & Core Structure

1.  **Root Layout (`app/layout.tsx`):** Setup HTML structure, Tailwind base, Providers (`ThemeProvider`, AuthProvider, Zustand?), Toaster.
2.  **Header (`components/layout/Header.tsx`):** Recreate using Shadcn/Tailwind. Placeholder for auth status. Mobile menu trigger (`Sheet`).
3.  **Footer (`components/layout/Footer.tsx`):** Recreate using Tailwind.
4.  **Sidebar (`components/layout/Sidebar.tsx`):** Recreate desktop sidebar using Shadcn/Tailwind/Lucide. Plan state management. Use Next.js `<Link>`.
5.  **Mobile Sidebar (`components/layout/MobileSidebar.tsx`):** Implement using Shadcn `Sheet`.
6.  **Main Layout (`components/layout/MainLayout.tsx`):** Combine Header, Footer, Sidebar. Wrap page content.

## Phase 2: Authentication Flow (Supabase)

1.  **Supabase Clients (`lib/supabase/client.ts`, `lib/supabase/server.ts`):** Setup client/server instances.
2.  **Auth Context/Provider (`context/AuthContext.tsx`):** Create provider for client-side session management (`onAuthStateChange`, expose user/session/signOut). Wrap root layout.
3.  **Sign-In/Up Pages (`app/(auth)/sign-in/page.tsx`, `app/(auth)/sign-up/page.tsx`):** Build forms (Shadcn/react-hook-form). Implement Supabase email/password auth logic. Handle loading/errors (Toast). Redirect on success.
4.  **Auth Middleware (`middleware.ts`):** Protect routes. Check session using server client, redirect if needed.
5.  **Header Integration:** Connect Header to Auth Context for dynamic UI (User menu vs. Sign In button). Implement sign-out.

## Phase 3: Landing Page & Dashboard Shell

1.  **Landing Page (`app/page.tsx`):** Recreate static content/layout using Tailwind/Shadcn.
2.  **Dashboard Page (`app/dashboard/page.tsx`):** Setup page structure with `MainLayout`. Add placeholders for form and table.

## Phase 4: Dashboard Functionality (URL Submission & History)

1.  **Submission Form (`components/dashboard/SubmissionForm.tsx`):** Build form (Shadcn/react-hook-form). On submit, call backend API (`fetch`). Handle loading/feedback (Toast).
2.  **History Table (`components/dashboard/HistoryTable.tsx`):** Use Shadcn `Table`. Fetch data on client from backend API (in parent `app/dashboard/page.tsx`). Display data. Link to analysis page (Next.js `<Link>`). Handle loading/empty states.
3.  **Dashboard Page Integration:** Add form and table to `app/dashboard/page.tsx`.

## Phase 5: Analysis Dashboard Page

1.  **Dynamic Route (`app/analysis/[submissionId]/page.tsx`):** Use Client Component. Get `submissionId` (e.g., `useParams`). Fetch analysis data from backend API. Handle loading/errors.
2.  **Rebuild Analysis Components:** Recreate `SummaryCard`, `KeyThemesDisplay`, etc. using Shadcn `Card` / Tailwind.
3.  **Reintegrate Charts:** Reintroduce Plotly (`SentimentGauge`, `RatingsChart`, `PositivesNegativesChart`) and WordCloud (`WordCloudDisplay`) components within this Client Component page.
4.  **Layout Integration:** Use `MainLayout`. Add Back button/Export placeholders.

## Phase 6: Refinement, Styling & Testing

1.  **Styling:** Ensure Tailwind/Shadcn consistency.
2.  **Responsiveness:** Test on various screen sizes.
3.  **Accessibility:** Review semantic HTML, keyboard nav, contrasts.
4.  **Error Handling:** Implement robust API/render error handling (Toast).
5.  **Testing:** Adapt/write unit/integration tests (Jest/RTL for Next.js). Consider E2E (Cypress/Playwright).

## Phase 7: Documentation & Cleanup

1.  **Update README:** Update main README, create README for `frontend-next`.
2.  **Code Review:** Final review of `frontend-next`.
3.  **Remove Old Frontend:** Delete original `frontend` directory once stable.
4.  **Update `.mdc` Rules:** Ensure all `.mdc` files reflect the new stack and plan (this process).

This concludes the detailed step-by-step implementation plan for the RivalRecon project. Follow each phase carefully, ensuring that validations are performed after each critical step to maintain alignment with the project requirements.