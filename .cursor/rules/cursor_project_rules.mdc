---
description: Apply these rules when making changes to the project
globs:
alwaysApply: true
---

Update this rule if user requested changes to the project requirement, etc.

## Project Overview

* **Type:** Competitive Intelligence Tool
* **Description:** RivalRecon analyzes product reviews for CPG companies, providing actionable insights into both their own products and competitors.
* **Primary Goal:** Enable competitive intelligence through automated scraping, AI-driven analysis, and dynamic dashboard visualization of product reviews.

## Project Structure (Next.js App Router)

### Core Directories (`frontend-next/src/`)

*   **`app/`**: Contains all application routes, layouts, pages, and loading/error UIs. Uses file-system based routing.
    *   `app/layout.tsx`: Root layout applying to all routes.
    *   `app/page.tsx`: Landing page route.
    *   `app/dashboard/page.tsx`: Dashboard route.
    *   `app/analysis/[submissionId]/page.tsx`: Dynamic route for analysis results.
    *   `app/(auth)/layout.tsx`, `app/(auth)/sign-in/page.tsx`: Example route group for authentication pages.
*   **`components/`**: Reusable UI components, organized by feature or type (e.g., `components/ui/` for Shadcn components, `components/layout/`, `components/dashboard/`).
*   **`lib/`**: Utility functions, helper scripts, constants (e.g., `lib/utils.ts` from Shadcn, `lib/supabase/` for client/server instances).
*   **`context/`**: React Context providers (e.g., for Supabase Auth state).
*   **`styles/`**: Global styles (`globals.css`).

### Key Files (`frontend-next/`)

*   **`tailwind.config.ts`**: Tailwind CSS configuration file.
*   **`postcss.config.js`**: PostCSS configuration (usually standard for Next.js).
*   **`middleware.ts`**: Next.js middleware for handling authentication checks, redirects, etc.
*   **`components.json`**: Shadcn UI configuration file.
*   **`.env.local`**: Environment variables (prefixed with `NEXT_PUBLIC_` for browser access).

## Tech Stack Rules (Frontend Migration)

*   **Framework:** Next.js (App Router) - Enforce App Router patterns (Server Components, Client Components, file-based routing).
*   **Styling:** Tailwind CSS & Shadcn UI - Use utility classes primarily. Leverage Shadcn components and themes. Configure via `tailwind.config.ts` and `globals.css`.
*   **UI Components:** Shadcn UI - Prefer composing Shadcn components. Use the CLI (`npx shadcn-ui@latest add`) to add new components.
*   **Icons:** Lucide React (`lucide-react`) - Standard icon library integrated with Shadcn.
*   **Authentication:** Supabase Client (`@supabase/supabase-js`) - Use client and server instances appropriately. Manage auth state via Context or state management library.
*   **Data Visualization:** Plotly.js (`react-plotly.js`), react-d3-cloud - Integrate within Client Components.
*   **State Management (Optional):** Zustand recommended for simple global state if needed beyond Context.
*   **Forms (Optional):** React Hook Form + Zod recommended for forms and validation.

## PRD Compliance

* **Non-Negotiable:**

    * "To analyze product reviews for CPG companies, providing actionable insights into their own products and competitors." – Mandates remain the same (robust scraping, AI analysis via DeepSeek API, comprehensive competitive insights visualized).

## App Flow Integration (Next.js)

* **Stack-Aligned Flow:**

    * Example: "Next.js Supabase Auth Flow → Middleware checks session. Sign-in page (`app/(auth)/sign-in/page.tsx`) uses Supabase client for authentication. Auth state managed via Context/Provider (`context/AuthContext.tsx`) available in Client Components."
    * Example: "Data Fetching → Use Server Components for initial data load where possible. Use Client Components with `useEffect` or libraries like SWR/TanStack Query for client-side fetching from backend API."

## Best Practices

### Frontend (Next.js, Tailwind, Shadcn)

*   **Next.js (App Router):**
    *   Understand Server vs. Client Component distinction and use appropriately.
    *   Leverage file-based routing conventions (`page.tsx`, `layout.tsx`, `loading.tsx`, `error.tsx`).
    *   Use Route Groups `(folderName)` for organization without affecting URL paths.
    *   Utilize Next.js `<Link>` for client-side navigation.
    *   Use middleware for edge logic like authentication checks.
*   **Tailwind CSS:**
    *   Embrace utility-first approach.
    *   Use `@apply` sparingly; prefer component composition or utility classes.
    *   Configure `tailwind.config.ts` for custom theme values, colors, fonts.
    *   Ensure PurgeCSS (built-in) is configured correctly for production builds.
*   **Shadcn UI:**
    *   Use the CLI to add and update components.
    *   Customize components by modifying their source files in `components/ui/`.
    *   Compose components to build complex UIs.
    *   Follow Shadcn patterns for accessibility.
*   **Lucide React:**
    *   Import icons directly, e.g., `import { Home } from 'lucide-react';`.
    *   Use `className` prop for Tailwind styling.
*   **Supabase Client (Next.js):**
    *   Use separate client/server instances as needed.
    *   Manage auth state centrally (e.g., Context).
    *   Securely handle session management, especially with Server Components/Actions.
*   **Plotly.js / react-d3-cloud:**
    *   Wrap these libraries in Client Components (`'use client'`).
    *   Ensure charts are responsive using Tailwind/CSS.
    *   Optimize data fetching.
*   **TypeScript:**
    *   Utilize strong typing for props, state, and API responses.
    *   Leverage Zod for runtime validation alongside static types.

### Backend (Node.js, Express, Celery, Supabase DB - Unchanged)

*   **Node.js & Express:**
    *   Use middleware for error handling and request logging.
    *   Structure API endpoints following RESTful principles.
    *   Secure endpoints with proper authentication (JWT validation from Supabase) and rate limiting.
*   **Celery & Redis:**
    *   Use Celery for background tasks and queue management.
    *   Employ Redis for caching and session management.
    *   Monitor worker performance and task queue length.
*   **Supabase (PostgreSQL - DB Operations):**
    *   Structure database schemas with clear relationships between tables.
    *   Use Supabase RLS effectively for data security accessed via the backend.
    *   Ensure regular migrations and backups.

### General

*   **State Management:** Use Server Components for server state where possible. Use Client Component state (`useState`) or Context/Zustand for client-side/global UI state.
*   **Data Fetching:** Prefer Server Components for initial data. Use client-side fetching for interactive updates.
*   **Error Handling:** Implement error boundaries in React, handle API errors gracefully (e.g., using Shadcn `Toast`).

## Rules

*   Derive folder/file patterns **directly** from Next.js App Router conventions.
*   Use the `app/` directory for routing.
*   Prioritize Tailwind utility classes for styling.
*   Use Shadcn UI components and customization patterns.
*   Maintain clear separation between frontend (Next.js) and backend (Node.js/Express) logic and responsibilities.

## Rules Metrics

Before starting project development, create a metrics file in the root of the project called `cursor_metrics.md`.

### Instructions:

* Each time a cursor rule is used as context, update `cursor_metrics.md`.
* Use the following format for `cursor_metrics.md:`

# Rules Metrics

## Usage

The number of times each rule is used as context:

* rule-name.mdc: 5
* another-rule.mdc: 2
* ...other rules
