# RivalRecon Supabase Database Schema

This document provides a comprehensive overview of the Supabase database schema used in the RivalRecon application, as well as how these tables and fields map to the backend code.

## Overview

The RivalRecon database consists of three primary tables:

1. **submissions** - Stores information about product URLs submitted for analysis
2. **reviews** - Stores individual reviews collected from the submitted product URLs
3. **analyses** - Stores the analysis results generated from the collected reviews

## Table Schemas

### submissions

| Column Name                | Data Type                  | Nullable | Description                                           | Code Mapping                                   |
|----------------------------|----------------------------|----------|-------------------------------------------------------|-----------------------------------------------|
| id                         | uuid                       | NO       | Primary key                                           | `submission_id` in worker.py                  |
| url                        | text                       | NO       | Product URL submitted for analysis                    | `url` param in scrape_reviews()               |
| user_id                    | text                       | NO       | ID of the user who submitted the request             | Set in API endpoint                           |
| status                     | text                       | NO       | Current status of the submission (e.g., processing)   | Updated throughout the worker flow            |
| created_at                 | timestamp without timezone | YES      | When the submission was created                       | Auto-generated by Supabase                    |
| product_title              | text                       | YES      | Title of the product                                  | From product API response                     |
| brand_name                 | text                       | YES      | Brand of the product                                  | From product API response                     |
| category_name              | text                       | YES      | Product category                                      | From product API response                     |
| product_overall_rating     | numeric                    | YES      | Overall rating of the product                         | From product API response                     |
| product_num_ratings        | integer                    | YES      | Number of ratings for the product                     | From product API response                     |
| price                      | numeric                    | YES      | Product price                                         | From product API response                     |
| currency                   | text                       | YES      | Currency of the price                                 | From product API response                     |
| availability               | text                       | YES      | Product availability status                           | From product API response                     |
| product_description        | text                       | YES      | Product description                                   | From product API response                     |
| product_url                | text                       | YES      | Canonical product URL                                 | From product API response                     |
| asin                       | text                       | YES      | Amazon Standard Identification Number                 | Extracted from URL in worker.py               |
| sales_volume               | text                       | YES      | Estimated sales volume                                | From product API response                     |
| is_best_seller             | boolean                    | YES      | Whether product is a bestseller                       | From product API response                     |
| is_amazon_choice           | boolean                    | YES      | Whether product is Amazon's Choice                    | From product API response                     |
| is_prime                   | boolean                    | YES      | Whether product is Prime eligible                     | From product API response                     |
| climate_pledge_friendly    | boolean                    | YES      | Whether product is climate pledge friendly            | From product API response                     |
| product_features           | jsonb                      | YES      | Product features as JSON                              | From product API response                     |
| product_images             | jsonb                      | YES      | Product images as JSON                                | From product API response                     |
| product_specifications     | jsonb                      | YES      | Product specifications as JSON                        | From product API response                     |
| product_details_misc       | jsonb                      | YES      | Miscellaneous product details as JSON                 | From product API response                     |
| product_variants           | jsonb                      | YES      | Product variants as JSON                              | From product API response                     |
| api_response_product_details | jsonb                    | YES      | Raw API response for debugging                        | Raw product API response                      |
| is_competitor_product      | boolean                    | YES      | Whether this is a competitor product                  | Set in API endpoint                           |
| last_refreshed_at          | timestamp without timezone | YES      | When the submission was last refreshed                | Set during refresh operations                 |
| refresh_parent_id          | uuid                       | YES      | ID of the parent submission if this is a refresh      | Set during refresh operations                 |

### reviews

| Column Name          | Data Type                  | Nullable | Description                                        | Code Mapping                                     |
|----------------------|----------------------------|----------|----------------------------------------------------|--------------------------------------------------|
| id                   | uuid                       | NO       | Primary key                                        | Auto-generated by Supabase                       |
| submission_id        | uuid                       | YES      | Foreign key to submissions table                   | Set from submission_id param                     |
| review_text          | text                       | YES      | The full text of the review                        | From review.get('review_comment')                |
| review_date          | date                       | YES      | When the review was posted                         | From review.get('review_date')                   |
| created_at           | timestamp without timezone | YES      | When the review was stored in database             | Set to current timestamp                         |
| review_title         | text                       | YES      | Title of the review                                | From review.get('review_title')                  |
| review_images        | array                      | YES      | Array of review image URLs                         | Not currently populated                          |
| verified_purchase    | boolean                    | YES      | Whether reviewer purchased the product             | From review.get('verified_purchase')             |
| asin                 | varchar                    | YES      | Amazon Standard Identification Number              | Not currently populated from reviews API         |
| url                  | text                       | YES      | URL to the review                                  | Not currently populated                          |
| review_rating        | numeric                    | YES      | Star rating (1-5)                                  | From review.get('review_star_rating')            |
| api_review_id        | text                       | YES      | Review ID from the API                             | From review.get('review_id')                     |
| review_author        | text                       | YES      | Name of reviewer                                   | From review.get('review_author')                 |
| helpful_votes_text   | text                       | YES      | Text indicating helpful votes                      | From review.get('helpful_votes')                 |
| is_vine_review       | boolean                    | YES      | Whether this is a Vine review                      | From review.get('vine_voice')                    |

### analyses

| Column Name               | Data Type                  | Nullable | Description                                       | Code Mapping                                  |
|---------------------------|----------------------------|----------|---------------------------------------------------|-----------------------------------------------|
| id                        | uuid                       | NO       | Primary key                                        | Auto-generated by Supabase                    |
| submission_id             | uuid                       | YES      | Foreign key to submissions table                   | Set from submission_id param                  |
| trending                  | text                       | YES      | Trend analysis based on reviews                    | From analysis_results.get('trending')         |
| top_positives             | jsonb                      | YES      | Top positive points from reviews                   | From analysis_results.get('top_positives')    |
| top_negatives             | jsonb                      | YES      | Top negative points from reviews                   | From analysis_results.get('top_negatives')    |
| word_map                  | jsonb                      | YES      | Most frequent meaningful words and counts          | From analysis_results.get('word_map')         |
| competitive_insights      | jsonb                      | YES      | Insights comparing to competitors                  | Not currently populated                       |
| opportunities             | jsonb                      | YES      | Identified opportunities from reviews              | Not currently populated                       |
| created_at                | timestamp without timezone | YES      | When the analysis was created                      | Auto-generated by Supabase                    |
| key_themes                | jsonb                      | YES      | Key themes identified in reviews                   | From analysis_results.get('themes')           |
| review_count              | integer                    | YES      | Total number of reviews analyzed                   | From local variable rating_count              |
| average_rating            | numeric                    | YES      | Average rating from analyzed reviews               | From local_average_rating                     |
| rating_distribution       | jsonb                      | YES      | Distribution of ratings by star level              | From local_rating_distribution                |
| key_insights              | jsonb                      | YES      | Key insights from the reviews                      | Not currently populated                       |
| updated_at                | timestamp without timezone | YES      | When the analysis was last updated                 | Auto-generated by Supabase                    |
| ratings_over_time         | jsonb                      | YES      | Ratings trends over time                           | From local_monthly_avg_ratings                |
| display_name              | text                       | YES      | Display name for the analysis                      | Not currently populated                       |
| summary                   | text                       | YES      | Summary of the analysis                            | Not currently populated                       |
| sentiment_positive_score  | double precision           | YES      | Proportion of positive sentiment (0.0-1.0)         | From analysis_results.get('sentiment_positive_score') |
| sentiment_negative_score  | double precision           | YES      | Proportion of negative sentiment (0.0-1.0)         | From analysis_results.get('sentiment_negative_score') |
| sentiment_neutral_score   | double precision           | YES      | Proportion of neutral sentiment (0.0-1.0)          | From analysis_results.get('sentiment_neutral_score')  |

## Data Flow and Processing

### Submission Flow

1. User submits a product URL through the frontend
2. Backend API creates a new entry in the `submissions` table with status "pending"
3. Celery task `scrape_reviews` is triggered with the submission_id and URL
4. Worker extracts the ASIN from the URL and fetches reviews from the RapidAPI endpoint
5. Reviews are stored in the `reviews` table, linked to the submission_id
6. Submission status is updated to "processing" and then "completed" when done

### Review Processing

Review data is fetched from the RapidAPI endpoint:
```python
# Current endpoint and host
rapidapi_reviews_host = 'real-time-amazon-data.p.rapidapi.com'
endpoint = '/product-reviews'

# API call parameters
params = {
    'asin': asin,
    'country': 'US',
    'page': str(current_page),
    'sort_by': 'MOST_RECENT',
    'star_rating': 'ALL',
    'verified_purchases_only': 'false',
    'images_or_videos_only': 'false',
    'current_format_only': 'false'
}
```

### Analysis Flow

1. After reviews are collected, the `analyze_reviews` task is triggered
2. Local calculations are performed on the reviews data for:
   - Average rating
   - Rating distribution
   - Ratings over time (monthly averages)
3. DeepSeek API is called to analyze review text and generate insights
4. Results are stored in the `analyses` table, linked to the submission_id
5. Submission status is updated to reflect completion or failure

## Key Code Mappings

### In worker.py:

#### Review Data Mapping (scrape_amazon_data function)

```python
review_obj = {
    'review_text': review_text,
    'review_rating': review_rating,
    'submission_id': submission_id,
    'created_at': datetime.now().isoformat(),
    'review_title': review.get('review_title', ''),
    'api_review_id': review.get('review_id', ''),
    'review_author': review.get('review_author', ''),
}

# Additional fields when available
if 'verified_purchase' in review:
    review_obj['verified_purchase'] = review.get('verified_purchase') == 'true'
    
if 'helpful_votes' in review:
    review_obj['helpful_votes_text'] = review.get('helpful_votes')
    
# Date handling
review_date = review.get('review_date')
if review_date:
    review_obj['review_date'] = review_date
    
# Vine review status
vine_voice = review.get('vine_voice', False)
if vine_voice:
    review_obj['is_vine_review'] = True
```

#### Analysis Data Mapping (analyze_reviews function)

```python
data_to_upsert = {
    'submission_id': submission_id,
    'status': 'completed',
    'average_rating': round(local_average_rating, 2),
    'rating_distribution': json.dumps(local_rating_distribution),
    'ratings_over_time': json.dumps(local_monthly_avg_ratings),
    'sentiment_positive_score': analysis_results.get('sentiment_positive_score'),
    'sentiment_negative_score': analysis_results.get('sentiment_negative_score'),
    'sentiment_neutral_score': analysis_results.get('sentiment_neutral_score'),
    'review_count': rating_count,
    'top_positives': json.dumps(analysis_results.get('top_positives', [])),
    'top_negatives': json.dumps(analysis_results.get('top_negatives', [])),
    'word_map': json.dumps(analysis_results.get('word_map', {})),
    'trending': analysis_results.get('trending'),
    'key_themes': json.dumps(analysis_results.get('themes', []))
}
```

## Important Notes

1. When adding new fields to the database, ensure corresponding updates to the worker code
2. The database schema includes fields not currently populated by the API responses
3. Some fields require JSON serialization (`json.dumps()`) before storing in Supabase
4. Foreign key relationships exist between tables (submission_id links all tables)
5. API response structures may change, requiring updates to data extraction logic
