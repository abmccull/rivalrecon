---
description: Apply these rules when making changes to the project
globs: 
alwaysApply: true
---

Update this rule if user requested changes to the project requirement, etc.
# Tech Stack Document

This document outlines the current technology stack for the RivalRecon application, which is now organized as a modern monorepo using npm workspaces.

## Monorepo & Workspace Management
- **Monorepo Tooling:** npm workspaces
- **Workspaces:**
  - `/app` — Next.js frontend
  - `/backend` — Node.js backend
- **Scripts:** Use root-level scripts (`build`, `dev`, `lint`, `test`) for all workspaces

## Frontend (`/app`)
- **Framework:** Next.js (App Router, v14+)
- **Language:** TypeScript
- **Styling:** Tailwind CSS, Shadcn UI
- **State Management:** React Context API (if needed)
- **Authentication & Data:** Supabase Auth & Database
- **API Integration:** Supabase client, REST endpoints
- **Deployment:** Vercel (recommended)

## Backend (`/backend`)
- **Framework:** Node.js with Express
- **Language:** JavaScript (ES6+)
- **Database:** PostgreSQL via Supabase
- **Authentication:** Supabase Auth (JWT validation)
- **Task Queue:** Celery (Python) with Redis
- **Integrations:** DeepSeek API (via services), Webhooks
- **Deployment:** Supabase (database), custom server (API/backend)

## Additional Tooling
- **Linting:** ESLint (with TypeScript support in frontend)
- **Formatting:** Prettier
- **Testing:** (Add as needed for frontend/backend)
- **CI/CD:** (Planned, not yet implemented)

## Notes
- All legacy code and dependencies (React Router, Chakra UI, etc.) have been removed.
- Use `NEXT_PUBLIC_` prefix for any frontend-exposed environment variables.
- See `/README.md` and `/app/README.md` for usage and development instructions.
- **UI Components**: Shadcn UI
- **CSS Framework**: Tailwind CSS
- **State Management**: Zustand
- **Form Handling**: React Hook Form with Zod validation
- **Data Fetching**: Server Components + Client fetching where needed
- **Icons**: Lucide React

### Backend
- **API**: Next.js API Routes + Supabase
- **Database**: PostgreSQL via Supabase (unchanged)
- **Authentication**: Supabase Auth with Next.js Auth Helpers
- **Hosting**: Vercel (Full Stack)

## Folder Structure (Target)

```
app/
├── (auth)/              # Authentication route group
│   ├── login/
│   ├── register/
│   └── reset-password/
├── (dashboard)/         # Dashboard route group
│   ├── dashboard/
│   ├── teams/
│   ├── competitors/
│   └── profile/
├── api/                 # API routes
components/
├── ui/                  # Shadcn UI components
├── layout/              # Layout components (Sidebar, Header)
├── competitor/          # Feature-specific components
├── auth/                # Authentication components
├── dashboard/           # Dashboard components
lib/
├── supabase.ts          # Supabase client
├── utils.ts             # Utility functions
├── hooks/               # Custom hooks
├── types/               # Type definitions
└── store/               # Zustand stores
```

## Dependencies Overview

### Core Dependencies
- `next`: React framework for production
- `react` & `react-dom`: React library
- `tailwindcss`: Utility-first CSS framework
- `shadcn-ui`: UI component library (imported as needed)
- `zustand`: State management
- `@supabase/auth-helpers-nextjs`: Supabase auth integration
- `@supabase/supabase-js`: Supabase client
- `react-hook-form`: Form state management
- `zod`: Schema validation
- `@hookform/resolvers`: Zod integration with React Hook Form
- `date-fns`: Date utilities
- `lucide-react`: Icon library
- `next-themes`: Dark/light theme support

### Development Dependencies
- `typescript`: Type checking
- `eslint`: Code linting
- `jest` & `@testing-library/react`: Testing tools
- `prettier`: Code formatting

## Authentication Strategy

The application uses Supabase Authentication with Next.js middleware to protect routes. The authentication flow includes:

1. Sign in/up through Supabase Auth
2. Session management via cookies
3. Route protection via Next.js middleware
4. User data fetching through Supabase client

## Component Design Philosophy

Components follow these principles:
- Server components by default, client components when necessary
- Clear separation between UI components and feature-specific logic
- Composition over inheritance
- Preference for controlled components
- Heavy use of Tailwind utility classes for styling
- Shadcn UI base components extended as needed

## Migration Rationale

The migration to Next.js, Shadcn UI, and Tailwind CSS provides:
- Improved performance through server components and static generation
- Simplified routing with Next.js App Router
- More consistent UI with Shadcn UI's accessible components
- Better developer experience with Tailwind's utility-first approach
- Simpler state management with Zustand
- Type-safe forms with React Hook Form + Zod

## Frontend Technologies (Migrated)

RivalRecon's frontend is now built using a modern stack focused on performance and developer experience:

*   **Next.js (App Router)**: The core React framework providing Server Components, Client Components, file-based routing, an optimized build system, and more.
*   **Tailwind CSS**: A utility-first CSS framework for rapid UI development and consistent styling.
*   **Shadcn UI**: A collection of beautifully designed, accessible, and composable UI components built using Radix UI and Tailwind CSS.
*   **Lucide React**: The default icon library, offering clean and consistent SVG icons.
*   **Plotly.js / react-plotly.js**: Used for interactive charts and graphs within Client Components.
*   **react-d3-cloud**: Used for generating word clouds within Client Components.
*   **Supabase Client (@supabase/supabase-js)**: Handles client-side interactions with Supabase for authentication.
*   **(Optional) Zustand**: For lightweight global client-side state management.
*   **(Optional) React Hook Form / Zod**: For robust form handling and validation.

These technologies ensure RivalRecon is performant, maintainable, and provides a modern, responsive user experience.

## Backend Technologies (Unchanged)

The backend handles everything behind the scenes – from processing data to managing user actions. The backend stack remains unchanged:

*   **Node.js and Express**: The backbone of our server, managing API routes.
*   **Celery with Redis**: For managing background tasks (scraping, AI analysis).
*   **Supabase (PostgreSQL - Database)**: Provides the database for storing submissions, reviews, analysis reports, etc. RLS is used for data security.
*   **Scraping Tools**: Scrapy, Puppeteer, Rapid API.
*   **DeepSeek API**: AI engine for review analysis.
*   **Stripe**: Payment processing for subscriptions.

## Infrastructure and Deployment

Robust infrastructure ensures reliability and scalability:

*   **Vercel**: Hosts the **Next.js frontend**, providing optimizations, CI/CD, CDN, and SSL.
*   **Railway**: Hosts the **Node.js backend** and Celery workers.
*   **Supabase**: Provides the hosted **PostgreSQL database** and handles **authentication** services.
*   **Domain & SSL**: Custom domain secured with SSL.

## Third-Party Integrations

External services enhance RivalRecon's capabilities:

*   **Supabase**: Provides authentication and database services.
*   **Stripe**: Handles secure subscription payments.
*   **Rapid API**: Enables scraping from specific sources (e.g., Amazon).
*   **DeepSeek API**: Delivers AI-powered analysis.

## Security and Performance Considerations

We take security and performance seriously:

*   **Authentication and Data Security**: Supabase Auth provides secure user management, integrated with Next.js middleware and backend JWT validation. Supabase RLS protects database access.
*   **Rate Limiting and Usage Controls**: Enforced by the backend API based on subscription tiers.
*   **Error Handling**: Clear error feedback on the frontend (e.g., Shadcn Toast), secure logging on the backend.
*   **Performance Optimizations**: Next.js features (Server Components, code splitting), Tailwind CSS efficiency, asynchronous backend tasks (Celery/Redis).
*   **Modern Dependency Management**: Using up-to-date, compatible libraries.
*   **Mobile Responsiveness**: Achieved via Tailwind CSS.

## Conclusion and Overall Tech Stack Summary

In summary, RivalRecon's tech stack combines a newly migrated, modern frontend with a stable, existing backend:

*   **Frontend**: Next.js (App Router), Tailwind CSS, Shadcn UI, Lucide React, Plotly.js, react-d3-cloud.
*   **Backend**: Node.js, Express, Celery, Redis, Scrapy, Puppeteer, Rapid API, DeepSeek API.
*   **Database & Auth**: Supabase (PostgreSQL).
*   **Payments**: Stripe.
*   **Infrastructure**: Vercel (frontend), Railway (backend), Supabase (DB/Auth).

These choices align perfectly with our goal to empower CPG companies with actionable insights from product reviews, delivered through a sophisticated, performant, and user-friendly platform.
