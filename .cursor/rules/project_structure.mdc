---
description: 
globs: 
alwaysApply: true
---
# RivalRecon Project Structure (Monorepo: Next.js Frontend & Node.js Backend)

This document describes the current directory structure, naming conventions, and best practices for the RivalRecon monorepo. The project uses npm workspaces to manage both the Next.js frontend (`/app`) and the Node.js backend (`/backend`).

## Directory Structure

```
rivalrecon/
├── app/                # Next.js frontend workspace
│   ├── public/         # Static assets (images, favicon, etc.)
│   ├── src/            # Source code for frontend
│   │   ├── app/        # Next.js App Router (routes, layouts, pages)
│   │   ├── components/ # Reusable React components
│   │   ├── lib/        # Frontend utilities, helpers, API clients
│   │   └── middleware.ts # (If present) Next.js middleware
│   ├── package.json    # Frontend dependencies & scripts
│   ├── tsconfig.json   # TypeScript config for frontend
│   └── ...             # Other config files (eslint, postcss, etc.)
│
├── backend/            # Node.js backend workspace
│   ├── config/         # Backend configuration files
│   ├── routes/         # Express route handlers
│   ├── services/       # Business logic, integrations (e.g., DeepSeek)
│   ├── utils/          # Utility functions for backend
│   ├── worker/         # Background jobs, Celery/Redis integration
│   ├── package.json    # Backend dependencies & scripts
│   └── ...             # Other backend-specific files
│
├── package.json        # Root: npm workspaces, scripts for all workspaces
├── README.md           # Project overview and monorepo usage
├── implementation_plan.md # Architecture & planning docs
└── ...                 # Other root-level files (env, gitignore, etc.)
```

## Naming Conventions
- **Directories:** kebab-case (e.g., `config`, `services`)
- **Files:**
  - Components: PascalCase (e.g., `UserProfile.tsx`)
  - Utilities, scripts: camelCase or kebab-case
  - Tests: `.test.js` or `.spec.ts`
- **Env variables:** Use `NEXT_PUBLIC_` prefix for frontend-exposed secrets

## Best Practices
- Keep frontend and backend logic isolated in their respective workspaces
- Use root-level scripts (`npm run build`, `npm run dev`, etc.) for workspace-wide operations
- Store shared documentation at the root or in a dedicated `/docs` folder
- Regularly update documentation and remove obsolete files

## Workspace Scripts
- Run scripts for all workspaces from the root:
  - `npm run build` — builds both frontend and backend
  - `npm run dev` — runs dev servers (if supported)
  - `npm run lint` — lints all workspaces
  - `npm run test` — runs tests for all workspaces

Refer to each workspace’s `README.md` for details on workspace-specific scripts and development workflows.
│   │   │   └── ... (other routes: loading.tsx, error.tsx, template.tsx)
│   │   ├── components/      # Reusable UI components
│   │   │   ├── ui/          # Shadcn UI base components (managed by CLI)
│   │   │   ├── layout/      # Header, Footer, Sidebar, etc.
│   │   │   ├── dashboard/   # Components specific to the dashboard
│   │   │   ├── analysis/    # Components specific to the analysis page
│   │   │   └── common/      # General reusable components
│   │   ├── lib/             # Utility functions, constants, Supabase clients
│   │   │   ├── utils.ts     # Shadcn utility functions
│   │   │   ├── constants.ts
│   │   │   └── supabase/    # Supabase client/server instances
│   │   ├── context/         # React Context providers (e.g., AuthContext)
│   │   ├── hooks/           # Custom React hooks
│   │   ├── styles/          # Global styles
│   │   │   └── globals.css
│   │   └── types/           # Shared TypeScript types
│   ├── public/              # Static assets (images, fonts, etc.)
│   ├── components.json      # Shadcn UI config
│   ├── next.config.mjs      # Next.js configuration
│   ├── tailwind.config.ts   # Tailwind CSS configuration
│   ├── postcss.config.js    # PostCSS configuration
│   ├── tsconfig.json        # TypeScript configuration
│   ├── package.json         # Frontend dependencies
│   ├── middleware.ts        # Next.js middleware (root or src/)
│   └── .env.local           # Frontend environment variables
│
├── backend/                 # Node.js backend application (Existing Structure)
│   ├── src/
│   │   ├── controllers/     # Request handlers
│   │   ├── middleware/      # Express middleware
│   │   ├── models/          # Data models (if any)
│   │   ├── routes/          # API route definitions
│   │   ├── services/        # Business logic
│   │   ├── utils/           # Utility functions
│   │   ├── types/           # TypeScript types
│   │   └── app.ts           # Express application setup
│   ├── worker/              # Celery worker (Existing)
│   ├── package.json         # Backend dependencies
│   └── .env                 # Backend environment variables
│
├── .gitignore
├── package.json             # Root package.json (Optional, for workspace management)
└── README.md                # Project overview
```

## File Naming Conventions

### Frontend (Next.js / `frontend-next`)

1.  **Routing Files (`app/`):** Use special filenames: `page.tsx`, `layout.tsx`, `loading.tsx`, `error.tsx`, `template.tsx`.
2.  **Route Groups:** Use parentheses `(groupName)` for folders that don't affect the URL path.
3.  **Dynamic Segments:** Use square brackets `[segmentName]` for dynamic URL parameters.
4.  **Components (`components/`):** Use PascalCase: `UserProfile.tsx`, `DataTable.tsx`.
5.  **Shadcn UI Components (`components/ui/`):** Keep names generated by the CLI (kebab-case filenames like `button.tsx` but PascalCase component names like `Button`).
6.  **Utilities/Hooks/Context/Lib:** Use camelCase or PascalCase as appropriate: `useAuth.ts`, `AuthContext.tsx`, `formatDate.ts`.
7.  **Types:** Use PascalCase, often suffixed with `Types` or within a `types.ts` file: `AnalysisTypes.ts`.
8.  **Styling:** `globals.css` for global styles. `tailwind.config.ts` for theme/plugin configuration.
9.  **Tests:** Place adjacent to the file being tested, suffix with `.test.tsx` or `.spec.tsx`.

### Backend (Node.js / `backend` - Existing Conventions)

1.  Follow existing conventions (likely camelCase or PascalCase based on file type).

## Best Practices

### Frontend Structure

1.  **App Router:** Organize routes logically using folders and route groups.
2.  **Component Colocation:** Keep closely related components together within feature folders (e.g., `components/dashboard/`).
3.  **Shadcn UI:** Keep base UI components in `components/ui/`. Customize them there if needed.
4.  **Lib Folder:** Centralize utilities, constants, and external service clients (like Supabase) in `lib/`.
5.  **Server vs. Client:** Clearly designate Client Components with `'use client'`. Default to Server Components.

### Backend Structure (Existing)

1.  Maintain the existing modular structure (controllers, services, routes, etc.).

### General

1.  **Environment Variables:** Use `NEXT_PUBLIC_` prefix in `frontend-next/.env.local` for browser-exposed variables. Keep backend variables in `backend/.env` without the prefix.
2.  **Types:** Use TypeScript consistently. Define shared types where appropriate.
3.  **Modularity:** Keep components and modules focused and single-responsibility.
4.  **Avoid Deep Nesting:** Try to keep directory nesting reasonably shallow.

### Documentation

1.  **Code Comments:** Document complex logic, types (JSDoc/TSDoc), and component props.
2.  **READMEs:** Maintain a root README and potentially READMEs within `frontend-next` and `backend` explaining setup and architecture specific to each part.

## Adding New Features

1.  **Frontend:**
    *   Create new route directories/files within `app/`.
    *   Create new components within `components/`, organizing into `common/`, `layout/`, or feature-specific folders.
    *   Add Shadcn UI components using the CLI.
    *   Add utility functions to `lib/`.
2.  **Backend:**
    *   Follow existing patterns for adding new routes, controllers, and services.

## Maintenance

1.  **Dependencies:** Regularly update dependencies for both frontend and backend.
2.  **Refactoring:** Refactor components and utilities to maintain code quality and reduce duplication.
3.  **Code Quality:** Adhere to ESLint/Prettier rules configured for each project.
