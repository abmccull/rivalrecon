---
description: Apply these rules when making changes to the project
globs:
alwaysApply: true
---

Update this rule if user requested changes to the project requirement, etc.

# RivalRecon Security Guidelines (Post Next.js Migration)

This document outlines security considerations and best practices for RivalRecon, focusing on secure design, robust architecture, and adherence to best coding practices, reflecting the frontend migration to Next.js.

---

## 1. System Architecture Overview

- **Frontend:**
  - Framework: **Next.js (App Router)**
  - UI Library: **Shadcn UI (using Radix UI & Tailwind CSS)**
  - Styling: **Tailwind CSS**
  - Data Visualization: Plotly.js, react-d3-cloud
  - Routing: **Next.js File-based Routing**
  - Icons: **Lucide React**
  - Security Notes:
    - Use HTTPS exclusively.
    - Leverage Supabase secure cookie storage for session management (HttpOnly, Secure, SameSite enforced by Supabase/Next.js middleware).
    - Implement Content Security Policy (CSP) headers (via `next.config.mjs` or Vercel).
    - Ensure Server Component props are validated and data passed to Client Components is sanitized.
    - Validate all form inputs (client and server-side where applicable, e.g., using Zod).
    - Ensure mobile-responsive design (Tailwind).

- **Backend:**
  - Framework: Node.js with Express
  - Background Jobs: Celery and Redis
  - API Integrations: Scrapy, Puppeteer, Rapid API, DeepSeek API
  - Security Considerations:
    - **Validate and sanitize all incoming data from API requests.**
    - Use parameterized queries or ORMs with Supabase (PostgreSQL).
    - Manage secrets using environment variables (Railway secrets management).
    - **Validate Supabase JWT tokens on all protected endpoints.**
    - Enforce rate limiting and throttling.

- **Authentication & Authorization:**
  - Tool: **Supabase Authentication**
  - Implementation:
    - Enforce robust authentication via Supabase (email/password, potentially others).
    - **Session Management:** Handled primarily by Supabase client libraries (using secure cookies) and Next.js middleware/server-side checks.
    - **Authorization:** Validate user roles/permissions via Supabase JWT claims on backend API calls. Implement Row Level Security (RLS) in Supabase database.

- **Payment Processing:**
  - Provider: Stripe
  - Use secure webhooks (verify signatures) and encryption for sensitive data handling.

- **Deployment and Infrastructure:**
  - Frontend: Deployed using **Vercel** (optimized for Next.js).
  - Backend: Railway
  - Database: Supabase (PostgreSQL) with secure connections enforced.
  - All connections use TLS 1.2+ and up-to-date cipher suites.

---

## 2. Core Features & Milestones (Security Focus)

### 2.1 User Management & Subscription

- **User Roles:**
  - Single user profile for MVP.
  - Enforce analysis limits based on subscription plan (validation likely needed on backend API).
- **Security Measures:**
  - Secure session management via Supabase Auth and Next.js integration.
  - Authorization enforced on protected frontend routes (via Middleware) and backend API endpoints (via token validation).

### 2.2 Data Scraping & Processing

- **Scraping Components:** (Backend responsibility)
  - Input Validation:
    - Sanitize URLs and user inputs **on the backend** before initiating scraping.
    - Validate scraped content before processing.
- **Error Handling:**
  - Provide user-friendly error messages on frontend (e.g., Shadcn Toast).
  - Log detailed errors securely on the backend without exposing sensitive info.

### 2.3 AI Analysis Integration

- **DeepSeek API:** (Backend responsibility)
  - Send valid, sanitized data for analysis.
  - Handle API errors gracefully on backend, relay user-friendly status to frontend.

### 2.4 Dashboard & Reporting

- **Visualizations:**
  - Use Plotly.js and react-d3-cloud within Next.js Client Components.
  - Ensure data passed to visualization libraries is properly structured.
  - **Sanitize any user-generated content displayed in charts/text to prevent XSS.**
- **Export Options:**
  - Ensure data exported (PDF/CSV) is scoped to the authorized user (backend responsibility).

---

## 3. UI/UX & Branding

- **Brand Guidelines:**
  - Color Palette: Deep Blue, Teal, Pale Blue, Dark Gray (Implement via Tailwind theme/CSS variables).
  - Typography: Inter Font (Configure via Tailwind/globals.css).
  - Logo: Clean and modern design.
- **Design Tokens:**
  - Utilize Tailwind theme configuration (`tailwind.config.ts`) and CSS variables for consistency (aligned with Shadcn theming).

---

## 4. Security and Privacy Considerations

- **Data Protection:**
  - Encrypt sensitive data in transit (TLS 1.2+) and at rest (Supabase handles DB encryption).
- **Secrets Management:**
  - Frontend: Use `NEXT_PUBLIC_` prefix only for non-sensitive, browser-exposed keys. Server-side Next.js logic can access other env vars.
  - Backend: Use Railway environment variable management.
- **API Security:**
  - Validate and sanitize all inputs on backend API endpoints.
  - Use rate limiting on backend API endpoints.
  - Implement secure error handling (fail securely).
  - **Enforce CORS correctly on the backend API (Express).**
- **Session Management:**
  - Rely on Supabase Auth secure cookie management.
  - Implement session checks in Next.js middleware and potentially Server Components.

---

## 5. Infrastructure and DevOps

- **Server Hardening:** (Primarily Backend/Railway responsibility)
  - Keep dependencies updated (Frontend & Backend) with vulnerability scanning (e.g., `npm audit`, GitHub Dependabot).
- **Deployment Security:**
  - CI/CD pipelines (e.g., Vercel for frontend, GitHub Actions for backend?) configured with security checks.
  - Vercel provides many security features out-of-the-box for Next.js.

---

## 6. Next Steps & Task Breakdown (Security Focus)

*(Refers to the detailed migration plan in implementation_plan.mdc)*
- **Ensure Supabase RLS policies are correctly implemented and enforced.**
- **Implement robust JWT validation middleware in the backend Express application.**
- **Configure CSP and other security headers in Next.js/Vercel.**
- **Set up secure handling of Stripe webhooks on the backend.**
- **Perform security reviews during frontend component development (input validation, output encoding).**

---

## 7. Summary

This security plan for RivalRecon, updated for the Next.js frontend, emphasizes:

- Secure defaults (Supabase Auth, Next.js, Vercel).
- Robust authentication & authorization across frontend and backend.
- Rigorous input validation (client-side via forms, server-side on API).
- Secure communication and session management.
- Compliance with security principles (Least Privilege, Defense in Depth, Fail Securely).

---

*Note: This document should be reviewed periodically, and security updates as well as architectural changes must be reflected immediately to mitigate any emerging threats or vulnerabilities.*